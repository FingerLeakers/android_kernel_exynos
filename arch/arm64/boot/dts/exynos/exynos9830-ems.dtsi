/*
 * SAMSUNG EXYNOS SoC EMS device tree source
 *
 * Copyright (c) 2019 Samsung Electronics Co., Ltd.
 *             http://www.samsung.com
 *
 * SAMSUNG EXYNOS SoC EMS device nodes are listed in this file.
 * EXYNOS based board files should include this file.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 */
#include <dt-bindings/soc/samsung/ems.h>

/ {
	ems {
		/* Load Balance Trigger */
		#define DEFAULT_RATIO	80
		lbt {
			pre-overutilized-cpus = "0-5";

			overutil-level0 {
				cpus =	"0-3",
					"4-5",
					"6-7";
				ratio =	<25>,
					<25>,
					<30>;
			};
			overutil-level1 {
				cpus = "0-7";
				ratio = <DEFAULT_RATIO>;
			};
		};

		/* FRT Migration */
		frt {
			/* little cores */
			coregroup0 {
				coverage-ratio = <30>;
				active-ratio = <25>;
			};
			/* middle cores */
			coregroup1 {
				coverage-ratio = <30>;
				active-ratio = <3>;
			};
			/* big cores */
			coregroup2 {
				coverage-ratio = <30>;
				active-ratio = <5>;
			};
		};

		part {
			/* little cores */
			coregroup0 {
				active-ratio-limit = <43>;
				active-ratio-boost = <42>;
			};
			/* middle cores */
			coregroup1 {
				active-ratio-limit = <48>;
				active-ratio-boost = <35>;
			};
			/* big cores */
			coregroup2 {
				active-ratio-limit = <30>;
				active-ratio-boost = <0>;
			};
		};

		ems-tune {
			boost-mode = <1>;

			mode0 {
				idx = <0>;
				desc = "normal";

				/* weight (%) applied to active cpu's efficiency */
				weight {           /* cpu    0   1   2   3   4   5   6   7 */
					root            = <800 800 800 800 200 200  33  45>;
					foreground      = <800 800 800 800 200 200  33  45>;
					background      = <800 800 800 800 200 200  33  45>;
					top-app         = <800 800 800 800 200 200  33  45>;
					rt              = <800 800 800 800 200 200  33  45>;
				};

				/* weight (%) applied to idle cpu's efficiency */
				idle-weight {      /* cpu     0    1    2    3   4   5   6   7 */
					root            = <1000 1000 1000 1000 250 250  41  56>;
					foreground      = <1000 1000 1000 1000 250 250  41  56>;
					background      = <1000 1000 1000 1000 250 250  41  56>;
					top-app         = <1000 1000 1000 1000 250 250  41  56>;
					rt              = <1000 1000 1000 1000 250 250  41  56>;
				};

				/* Boosting margin applied to frequency selection */
				/*
				 * HACK:
				 * To support negative boost, compensate dt_value during boottime
				 * Compensation executed only one time when paring DT during Booting Time
				 * Compensation Value = DT_Value - 100
				 * 	0~100   => -100~0
				 * 	101~200 => 1~100
				 */
				freq-boost {       /* cpu    0   1   2   3   4   5   6   7 */
					root            = <  100   100  100   100   100   100  100   100>;
					foreground      = <  100   100  100   100   100   100  100   100>;
					background      = <  100   100  100   100   100   100  100   100>;
					top-app         = <  105   105  105   105   105   105  105   105>;
					rt              = <  100   100  100   100   100   100  100   100>;
				};

				/* cpus allowed applied to core selection */
				cpus-allowed {
					target-sched-class = <EMS_SCHED_FAIR>;

					root		= "0-7";
					foreground 	= "0-7";
					background	= "0-7";
					top-app		= "0-7";
					rt		= "0-7";
				};

				/* gov-data used by CPUFreq governor */
				gov-data {		/* LIT MED BIG */
					step		= <  4   6   8>;
				};

				/* Ontime Migration */
				ontime {        /* root fg bg ta rt */
					enabled  = <  0  1  0  1  0  >;

					/* little cores */
					coregroup0 {
						lower-boundary = <0>;
						upper-boundary = <42>;
						lower-boundary-s = <0>;
						upper-boundary-s = <30>;
					};
					/* middle cores */
					coregroup1 {
						lower-boundary = <13>;
						upper-boundary = <72>;
						lower-boundary-s = <10>;
						upper-boundary-s = <85>;
					};
					/* big cores */
					coregroup2 {
						lower-boundary = <20>;
						upper-boundary = <100>;
						lower-boundary-s = <65>;
						upper-boundary-s = <100>;
					};
				};

				util-est {	/* root fg bg ta rt */
					enabled  = <  0  1  0  1  0  >;
				};
			};

			mode1 {
				idx = <1>;
				desc = "boost";
				prefer-idle = <1>;

				/* weight (%) applied to active cpu's efficiency */
				weight {           /* cpu    0   1   2   3   4   5   6   7 */
					root            = <100 100 100 100 100 100 100 100>;
					foreground      = <100 100 100 100 100 100 100 100>;
					background      = <100 100 100 100 100 100 100 100>;
					top-app         = <100 100 100 100 100 100 100 100>;
					rt              = <100 100 100 100 100 100 100 100>;
				};

				/* weight (%) applied to idle cpu's efficiency */
				idle-weight {      /* cpu    0   1   2   3   4   5   6   7 */
					root            = <125 125 125 125 125 125 125 125>;
					foreground      = <125 125 125 125 125 125 125 125>;
					background      = <125 125 125 125 125 125 125 125>;
					top-app         = <125 125 125 125 125 125 125 125>;
					rt              = <125 125 125 125 125 125 125 125>;
				};
			};

			mode2 {
				idx = <2>;
				desc = "boost";

				/* Boosting margin applied to frequency selection */
				/*
				 * HACK:
				 * To support negative boost, compensate dt_value during boottime
				 * Compensation executed only one time when paring DT during Booting Time
				 * Compensation Value = DT_Value - 100
				 * 	0~100   => -100~0
				 * 	101~200 => 1~100
				 */
				freq-boost {       /* cpu    0   1   2   3   4   5   6   7 */
					root            = < 100  100  100  100  100  100  100  100>;
					foreground      = < 100  100  100  100  100  100  100  100>;
					background      = < 100  100  100  100  100  100  100  100>;
					top-app         = < 180  180  180  180  180  180  105  105>;
					rt              = < 100  100  100  100  100  100  100  100>;
				};

				/* gov-data used by CPUFreq governor */
				gov-data {		/* LIT MED BIG */
					step		= <  4   2   8>;
				};

				/* Ontime Migration */
				ontime {        /* root fg bg ta rt */
					enabled  = <  0  1  0  1  0  >;

					/* little cores */
					coregroup0 {
						lower-boundary = <0>;
						upper-boundary = <42>;
						lower-boundary-s = <0>;
						upper-boundary-s = <30>;
					};
					/* middle cores */
					coregroup1 {
						lower-boundary = <13>;
						upper-boundary = <72>;
						lower-boundary-s = <1>;
						upper-boundary-s = <100>;
					};
					/* big cores */
					coregroup2 {
						lower-boundary = <20>;
						upper-boundary = <100>;
						lower-boundary-s = <13>;
						upper-boundary-s = <15>;
					};
				};

				/* weight (%) applied to active cpu's efficiency */
				weight {           /* cpu    0   1   2   3   4   5   6   7 */
					root            = <100 100 100 100 200 200  33  33>;
					foreground      = <100 100 100 100 200 200  33  33>;
					background      = <100 100 100 100 200 200  33  33>;
					top-app         = <100 100 100 100 200 200  33  33>;
					rt              = <100 100 100 100 200 200  33  33>;
				};

				/* weight (%) applied to idle cpu's efficiency */
				idle-weight {      /* cpu    0   1   2   3   4   5   6   7 */
					root            = <125 125 125 125 250 250  41  41>;
					foreground      = <125 125 125 125 250 250  41  41>;
					background      = <125 125 125 125 250 250  41  41>;
					top-app         = <125 125 125 125 250 250  41  41>;
					rt              = <125 125 125 125 250 250  41  41>;
				};
			};

			mode3 {
				idx = <3>;
				desc = "boost";

				/* Boosting margin applied to frequency selection */
				/*
				 * HACK:
				 * To support negative boost, compensate dt_value during boottime
				 * Compensation executed only one time when paring DT during Booting Time
				 * Compensation Value = DT_Value - 100
				 *	0~100   => -100~0
				 *	101~200 => 1~100
				 * Ex) 80 => -20, 70 => -30
				 */
				freq-boost {       /* cpu    0   1   2   3   4   5   6   7 */
					root            = <  80  80  80  80  70  70  80  80  >;
					foreground      = <  80  80  80  80  70  70  80  80  >;
					background      = <  80  80  80  80  70  70  80  80  >;
					top-app         = <  80  80  80  80  70  70  80  80  >;
					rt              = <  80  80  80  80  70  70  80  80  >;
				};

				/* Ontime Migration */
				ontime {        /* root fg bg ta rt */
					enabled  = <  0  1  0  1  0  >;

					/* little cores */
					coregroup0 {
						lower-boundary = <0>;
						upper-boundary = <42>;
						lower-boundary-s = <0>;
						upper-boundary-s = <30>;
					};
					/* middle cores */
					coregroup1 {
						lower-boundary = <13>;
						upper-boundary = <90>;
						lower-boundary-s = <10>;
						upper-boundary-s = <85>;
					};
					/* big cores */
					coregroup2 {
						lower-boundary = <75>;
						upper-boundary = <100>;
						lower-boundary-s = <65>;
						upper-boundary-s = <100>;
					};
				};
			};

			mode4 {
				idx = <4>;
				desc = "42 boost";

				/* Boosting margin applied to frequency selection */
				/*
				 * HACK:
				 * To support negative boost, compensate dt_value during boottime
				 * Compensation executed only one time when paring DT during Booting Time
				 * Compensation Value = DT_Value - 100
				 *	0~100   => -100~0
				 *	101~200 => 1~100
				 * Ex) 80 => -20, 70 => -30
				 */
				freq-boost {       /* cpu    0   1   2   3   4   5   6   7 */
					root            = <  80   80   80   80   70   70   80   80  >;
					foreground      = <  80   80   80   80   70   70   80   80  >;
					background      = <  80   80   80   80   70   70   80   80  >;
					top-app         = < 100  100  100  100  100  100  100  100  >;
					rt              = <  80   80   80   80   70   70   80   80  >;
				};

				/* Ontime Migration */
				ontime {        /* root fg bg ta rt */
					enabled  = <  0  1  0  1  0  >;

					/* little cores */
					coregroup0 {
						lower-boundary = <0>;
						upper-boundary = <42>;
						lower-boundary-s = <0>;
						upper-boundary-s = <30>;
					};
					/* middle cores */
					coregroup1 {
						lower-boundary = <13>;
						upper-boundary = <90>;
						lower-boundary-s = <10>;
						upper-boundary-s = <85>;
					};
					/* big cores */
					coregroup2 {
						lower-boundary = <75>;
						upper-boundary = <100>;
						lower-boundary-s = <65>;
						upper-boundary-s = <100>;
					};
				};
			};

			mode5 {
				idx = <5>;
				desc = "boost";

				/* Boosting margin applied to frequency selection */
				/*
				 * HACK:
				 * To support negative boost, compensate dt_value during boottime
				 * Compensation executed only one time when paring DT during Booting Time
				 * Compensation Value = DT_Value - 100
				 *	0~100   => -100~0
				 *	101~200 => 1~100
				 * Ex) 80 => -20, 70 => -30
				 */
				freq-boost {       /* cpu    0    1    2    3    4   5   6   7 */
					root            = <  130  130  130  130  70  70  80  80  >;
					foreground      = <  130  130  130  130  70  70  80  80  >;
					background      = <  130  130  130  130  70  70  80  80  >;
					top-app         = <  130  130  130  130  70  70  80  80  >;
					rt              = <  130  130  130  130  70  70  80  80  >;
				};

				/* gov-data used by CPUFreq governor */
				gov-data {		/* LIT MED BIG */
					step		= <  5   5   8>;
				};

				/* Ontime Migration */
				ontime {        /* root fg bg ta rt */
					enabled  = <  0  1  0  1  0  >;

					/* little cores */
					coregroup0 {
						lower-boundary = <0>;
						upper-boundary = <42>;
						lower-boundary-s = <0>;
						upper-boundary-s = <30>;
					};
					/* middle cores */
					coregroup1 {
						lower-boundary = <13>;
						upper-boundary = <90>;
						lower-boundary-s = <10>;
						upper-boundary-s = <85>;
					};
					/* big cores */
					coregroup2 {
						lower-boundary = <75>;
						upper-boundary = <100>;
						lower-boundary-s = <65>;
						upper-boundary-s = <100>;
					};
				};
			};
		};
	};
};
